#include <string>
#include <set>
#include <regex>

namespace FifthKyu
{
    const std::string words[] =
    {
        "ACT",
        "ADD",
        "ALL",
        "APE",
        "AND",
        "ANN",
        "ANY",
        "ANT",
        "ARE",
        "ART",
        "ASS",
        "BAD",
        "BAR",
        "BAT",
        "BAY",
        "BEE",
        "BIG",
        "BIT",
        "BOB",
        "BOY",
        "BUN",
        "BUT",
        "CAN",
        "CAR",
        "CAT",
        "COT",
        "COW",
        "CUT",
        "DAD",
        "DAY",
        "DEW",
        "DID",
        "DIN",
        "DOG",
        "DON",
        "DOT",
        "DUD",
        "EAR",
        "EAT",
        "EEL",
        "EGG",
        "ERR",
        "EYE",
        "FAG",
        "FAR",
        "FLY",
        "FOR",
        "FUN",
        "FUR",
        "GAY",
        "GET",
        "GOT",
        "GUM",
        "GUN",
        "GUY",
        "GUT",
        "GYM",
        "HAS",
        "HAT",
        "HER",
        "HEY",
        "HIM",
        "HIS",
        "HIT",
        "HOW",
        "HUG",
        "HUN",
        "ICE",
        "INK",
        "ITS",
        "IVE",
        "JAN",
        "JET",
        "JOB",
        "JOT",
        "JOY",
        "KEY",
        "LAP",
        "LAY",
        "LIE",
        "LET",
        "LOG",
        "MAN",
        "MAP",
        "MAY",
        "MEN",
        "MOM",
        "MUD",
        "MUM",
        "NAP",
        "NEW",
        "NOD",
        "NOT",
        "NOW",
        "OAR",
        "ODD",
        "OFF",
        "OLD",
        "ONE",
        "OUR",
        "OUT",
        "PAN",
        "PAL",
        "PAT",
        "PAW",
        "PEN",
        "PET",
        "PIG",
        "PIT",
        "POT",
        "PRO",
        "PUT",
        "QUO",
        "RAG",
        "RAM",
        "RAN",
        "RAP",
        "RAT",
        "RED",
        "RIP",
        "ROD",
        "ROT",
        "RUN",
        "RUT",
        "SAT",
        "SAW",
        "SAY",
        "SEA",
        "SEE",
        "SEX",
        "SHE",
        "SOY",
        "SUN",
        "SUX",
        "TAN",
        "TAT",
        "TEA",
        "THE",
        "TIN",
        "TIP",
        "TIT",
        "TON",
        "TOP",
        "TOO",
        "TWO",
        "URN",
        "USE",
        "VAN",
        "VET",
        "VIP",
        "WAR",
        "WAS",
        "WAY",
        "WED",
        "WHO",
        "WHY",
        "WIN",
        "WON",
        "XXX",
        "YAK",
        "YAM",
        "YAP",
        "YOU",
        "YUM",
        "ZAP",
        "ZIP",
        "ZIT",
        "ZOO",
        "ABLE",
        "ACED",
        "AGOG",
        "AHEM",
        "AHOY",
        "ALLY",
        "AMEN",
        "ANTI",
        "ANTS",
        "ANUS",
        "APES",
        "ARMY",
        "ARSE",
        "ARTY",
        "AVID",
        "AWED",
        "BABY",
        "BARS",
        "BATS",
        "BAYS",
        "BEAR",
        "BEES",
        "BILL",
        "BITE",
        "BITS",
        "BLOW",
        "BLUE",
        "BOLD",
        "BONE",
        "BOOB",
        "BOOM",
        "BOSS",
        "BOYS",
        "BUFF",
        "BUNG",
        "BUNS",
        "BUMS",
        "BURP",
        "BUST",
        "BUSY",
        "BUZZ",
        "CANS",
        "CANT",
        "CARS",
        "CART",
        "CATS",
        "CHAP",
        "CHIC",
        "CHUM",
        "CIAO",
        "CLAP",
        "COCK",
        "CODE",
        "COOL",
        "COWS",
        "COZY",
        "CRAB",
        "CREW",
        "CURE",
        "CULT",
        "DADS",
        "DAFT",
        "DAWN",
        "DAYS",
        "DECK",
        "DEED",
        "DICK",
        "DING",
        "DOGS",
        "DOTS",
        "DOLL",
        "DOLT",
        "DONG",
        "DOPE",
        "DOWN",
        "DRAW",
        "DUCK",
        "DUDE",
        "DUMB",
        "DUTY",
        "EARL",
        "EARN",
        "EARS",
        "EASY",
        "EATS",
        "EDGE",
        "EELS",
        "EGGS",
        "ENVY",
        "EPIC",
        "EYES",
        "FACE",
        "FAGS",
        "FANG",
        "FARM",
        "FART",
        "FANS",
        "FAST",
        "FEAT",
        "FEET",
        "FISH",
        "FIVE",
        "FIZZ",
        "FLAG",
        "FLEW",
        "FLIP",
        "FLOW",
        "FOOD",
        "FORT",
        "FUCK",
        "FUND",
        "GAIN",
        "GEEK",
        "GEMS",
        "GIFT",
        "GIRL",
        "GIST",
        "GIVE",
        "GLEE",
        "GLOW",
        "GOLD",
        "GOOD",
        "GOSH",
        "GRAB",
        "GRIN",
        "GRIT",
        "GROT",
        "GROW",
        "GRUB",
        "GUNS",
        "GUSH",
        "GYMS",
        "HAIL",
        "HAIR",
        "HALO",
        "HANG",
        "HATS",
        "HEAD",
        "HEAL",
        "HEIR",
        "HELL",
        "HELP",
        "HERE",
        "HERO",
        "HERS",
        "HIGH",
        "HIRE",
        "HITS",
        "HOLY",
        "HOPE",
        "HOST",
        "HUNK",
        "HUGE",
        "HUNG",
        "HUNS",
        "HURT",
        "ICON",
        "IDEA",
        "IDLE",
        "IDOL",
        "IOTA",
        "JAZZ",
        "JERK",
        "JESS",
        "JETS",
        "JINX",
        "JOBS",
        "JOHN",
        "JOKE",
        "JUMP",
        "JUNE",
        "JULY",
        "JUNK",
        "JUST",
        "KATA",
        "KEYS",
        "KICK",
        "KIND",
        "KING",
        "KISS",
        "KONG",
        "KNOB",
        "KNOW",
        "LARK",
        "LATE",
        "LEAN",
        "LICE",
        "LICK",
        "LIKE",
        "LION",
        "LIVE",
        "LOGS",
        "LOCK",
        "LONG",
        "LOOK",
        "LORD",
        "LOVE",
        "LUCK",
        "LUSH",
        "MAKE",
        "MANY",
        "MART",
        "MATE",
        "MAXI",
        "MEEK",
        "MIKE",
        "MILD",
        "MINT",
        "MMMM",
        "MOMS",
        "MOOD",
        "MOON",
        "MOOT",
        "MUCH",
        "MUFF",
        "MUMS",
        "MUTT",
        "NAPS",
        "NAZI",
        "NEAT",
        "NECK",
        "NEED",
        "NEWS",
        "NEXT",
        "NICE",
        "NICK",
        "NOON",
        "NOSE",
        "NOTE",
        "OARS",
        "OATS",
        "ONCE",
        "ONLY",
        "OPEN",
        "ORGY",
        "OVAL",
        "OVER",
        "PANS",
        "PALS",
        "PART",
        "PAST",
        "PATS",
        "PAWS",
        "PEAR",
        "PERT",
        "PENS",
        "PETS",
        "PHEW",
        "PIPE",
        "PIPS",
        "PLAN",
        "PLUM",
        "PLUS",
        "POET",
        "POOF",
        "POOP",
        "POSH",
        "POTS",
        "PROS",
        "PSST",
        "PUKE",
        "PUNK",
        "PURE",
        "PUSH",
        "PUSS",
        "QUAD",
        "QUAK",
        "QUID",
        "QUIT",
        "RANT",
        "RAPE",
        "RAPS",
        "RAPT",
        "RATE",
        "RAMS",
        "RATS",
        "REAP",
        "RICK",
        "RING",
        "RIPE",
        "ROOT",
        "ROSE",
        "ROSY",
        "ROTS",
        "RUNT",
        "RUTS",
        "SAFE",
        "SAGE",
        "SANE",
        "SAVE",
        "SAWS",
        "SEEK",
        "SEXY",
        "SHAG",
        "SHIT",
        "SICK",
        "SIGH",
        "SIRE",
        "SLAG",
        "SLIT",
        "SLUT",
        "SNAP",
        "SNOG",
        "SNUG",
        "SOFT",
        "SOON",
        "SOUL",
        "SOUP",
        "SPRY",
        "STIR",
        "STUN",
        "SUCK",
        "SWAG",
        "SWAY",
        "TACT",
        "TANK",
        "TANS",
        "THAT",
        "THIS",
        "TIME",
        "TINS",
        "TINY",
        "TITS",
        "TOES",
        "TONS",
        "TONY",
        "TOPS",
        "TOYS",
        "UBER",
        "URNS",
        "USED",
        "USER",
        "USES",
        "VAIN",
        "VAMP",
        "VARY",
        "VEIN",
        "VENT",
        "VERY",
        "VEST",
        "VIEW",
        "VIVA",
        "VOLT",
        "VOTE",
        "WAFT",
        "WAGE",
        "WAKE",
        "WALK",
        "WALL",
        "WANG",
        "WANK",
        "WANT",
        "WARD",
        "WARM",
        "WARP",
        "WARS",
        "WART",
        "WASH",
        "WAVE",
        "WEAR",
        "WEDS",
        "WEED",
        "WEEN",
        "WELD",
        "WHAT",
        "WHEE",
        "WHEW",
        "WHIP",
        "WHIZ",
        "WHOA",
        "WIFE",
        "WILL",
        "WIND",
        "WING",
        "WINK",
        "WINS",
        "WIRE",
        "WISH",
        "WITH",
        "WORD",
        "WORK",
        "WRAP",
        "XMAN",
        "XMEN",
        "XRAY",
        "XTRA",
        "XXXX",
        "YANK",
        "YAKS",
        "YAMS",
        "YAPS",
        "YARD",
        "YARN",
        "YELP",
        "YERN",
        "YOKE",
        "YOLK",
        "YULE",
        "ZANY",
        "ZAPS",
        "ZIPS",
        "ZITS",
        "ZERO",
        "ZOOM",
        "ZOOS"
    };

    std::map<int, std::string> digits_to_words =
    {
        { 2, "ABC" },
        { 3, "DEF" },
        { 4, "GHI" },
        { 5, "JKL" },
        { 6, "MNO" },
        { 7, "PQRS" },
        { 8, "TUV" },
        { 9, "WXYZ" }
    };

    int GetKeyByValue(const char &character)
    {
        for (int i = 2; i <= 9; i++)
        {
            std::string characters = digits_to_words[i];

            for (char j : characters)
                if (j == character)
                    return i;
        }

        return 0;
    }

    const char& GetCharacterByIndex(const std::string &string, int index)
    {
        if (string.length() == index)
            return string[index - 1];

        return string[index];
    }

    std::vector<std::string> GetVariationsForWord(const std::string &word)
    {
        std::vector<std::string> result;
        std::string temporary_string;

        std::string first_characters = digits_to_words[GetKeyByValue(word[0])];
        std::string second_characters = digits_to_words[GetKeyByValue(word[1])];
        std::string third_characters = digits_to_words[GetKeyByValue(word[2])];
        std::string fourth_characters = (word.length() == 4 ? digits_to_words[GetKeyByValue(word[3])] : "0");

        for (int i = 0; i < first_characters.length(); i++)
        {
            for (int j = 0; j < second_characters.length(); j++)
            {
                for (int k = 0; k < third_characters.length(); k++)
                {
                    for (int l = 0; l < fourth_characters.length(); l++)
                    {
                        temporary_string = "";
                        temporary_string += GetCharacterByIndex(first_characters, i);
                        temporary_string += GetCharacterByIndex(second_characters, j);
                        temporary_string += GetCharacterByIndex(third_characters, k);

                        if (word.length() == 4)
                            temporary_string += GetCharacterByIndex(fourth_characters, l);

                        for (const std::string &accepted_word : words)
                            if (accepted_word == temporary_string)
                                result.push_back(temporary_string);
                    }
                }
            }
        }

        return result;
    }

    std::set<std::string> Check1800(const std::string &phone)
    {
        std::regex regex("1-800-([\\w]{3,4})-([\\w]{3,4})");
        std::cmatch regex_result;

        std::regex_match(phone.c_str(), regex_result, regex);
        std::string first_word = regex_result[1];
        std::string second_word = regex_result[2];

        std::vector<std::string> first_word_variations = GetVariationsForWord(first_word);
        std::vector<std::string> second_word_variations = GetVariationsForWord(second_word);

        std::set<std::string> result;
        for (const std::string& first_word_variation : first_word_variations)
            for (const std::string& second_word_variation : second_word_variations)
                result.insert(std::string("1-800-").append(first_word_variation).append("-").append(second_word_variation));

        return result;
    }
}